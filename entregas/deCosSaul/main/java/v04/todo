package v04;

public class Celda {
    
    private String contenido;

    public Celda() {
        this.contenido = "";
    }

    public String getContenido() {
        return contenido;
    }

    public void setContenido(String contenido) {
        this.contenido = contenido;
    }            
}
package v04;

public class HojaDeCalculo {

  private Celda[][] celdas;
  private final int FILAS;
  private final int COLUMNAS;

  public HojaDeCalculo(int numeroFilas, int numeroColumnas) {
    this.FILAS = numeroFilas;
    this.COLUMNAS = numeroColumnas;
    celdas = new Celda[FILAS][COLUMNAS];
    for (int i = 0; i < FILAS; i++) {
      for (int j = 0; j < COLUMNAS; j++) {
        celdas[i][j] = new Celda();
      }
    }
  }

  public Celda getCelda(int fila, int columna) {
    return celdas[fila][columna];
  }

  public int getNumeroDeFilas() {
    return FILAS;
  }

  public int getNumeroDeColumnas() {
    return COLUMNAS;
  }
}
package v04;

public class Navegador {
    private HojaDeCalculo hoja;
    private int filaActual;
    private int columnaActual;

    public Navegador(HojaDeCalculo hoja) {
        this.hoja = hoja;
        this.filaActual = 0;
        this.columnaActual = 0;
    }

    public Celda getCeldaActual() {
        return hoja.getCelda(filaActual, columnaActual);
    }

    public void moverArriba() {
        if (filaActual > 0) {
            filaActual--;
        }
    }

    public void moverAbajo() {
        if (filaActual < hoja.getNumeroDeFilas() - 1) {
            filaActual++;
        }
    }

    public void moverIzquierda() {
        if (columnaActual > 0) {
            columnaActual--;
        }
    }

    public void moverDerecha() {
        if (columnaActual < hoja.getNumeroDeColumnas() - 1) {
            columnaActual++;
        }
    }
}
package v04;

public class Viewport {
  private HojaDeCalculo hoja;
  private int filaInicio;
  private int columnaInicio;
  private final int FILAS_VIEWPORT;
  private final int COLUMNAS_VIEWPORT;
  private int filaCursor;
  private int columnaCursor;

  public Viewport(HojaDeCalculo hoja, int filasViewport, int columnasViewport) {
    this.hoja = hoja;
    this.filaInicio = 0;
    this.columnaInicio = 0;
    this.FILAS_VIEWPORT = filasViewport;
    this.COLUMNAS_VIEWPORT = columnasViewport;
    this.filaCursor = 0;
    this.columnaCursor = 0;
  }

  public Celda getCelda(int fila, int columna) {
    return hoja.getCelda(filaInicio + fila, columnaInicio + columna);
  }

  public void desplazarVerticalmente(int cantidad) {
    int nuevaFilaInicio = filaInicio + cantidad;

    if (nuevaFilaInicio >= 0 && nuevaFilaInicio + FILAS_VIEWPORT <= hoja.getNumeroDeFilas()) {
      filaInicio = nuevaFilaInicio;
    }
  }

  public void desplazarHorizontalmente(int cantidad) {
    int nuevaColumnaInicio = columnaInicio + cantidad;

    if (nuevaColumnaInicio >= 0 && nuevaColumnaInicio + COLUMNAS_VIEWPORT <= hoja.getNumeroDeColumnas()) {
      columnaInicio = nuevaColumnaInicio;
    }
  }

  public void moverCursor(int desplazamientoFila, int desplazamientoColumna) {
    filaCursor += desplazamientoFila;
    columnaCursor += desplazamientoColumna;

    if (filaCursor < 0) {
      desplazarVerticalmente(-1);
      filaCursor = 0;
    } else if (filaCursor >= FILAS_VIEWPORT) {
      desplazarVerticalmente(1);
      filaCursor = FILAS_VIEWPORT - 1;
    }

    if (columnaCursor < 0) {
      desplazarHorizontalmente(-1);
      columnaCursor = 0;
    } else if (columnaCursor >= COLUMNAS_VIEWPORT) {
      desplazarHorizontalmente(1);
      columnaCursor = COLUMNAS_VIEWPORT - 1;
    }
  }

  public Celda getCeldaCursor() {
    return hoja.getCelda(filaInicio + filaCursor, columnaInicio + columnaCursor);
  }

  public int getFilaInicio() {
    return filaInicio;
  }

  public int getColumnaCursor() {
    return columnaCursor;
  }

  public int getColumnaInicio() {
    return columnaInicio;
  }

  public int getFilasViewport() {
    return FILAS_VIEWPORT;
  }

  public int getColumnasViewport() {
    return COLUMNAS_VIEWPORT;
  }

  public int getFilaCursorGlobal() {
    return filaInicio + filaCursor;
  }

  public int getColumnaCursorGlobal() {
    return columnaInicio + columnaCursor;
  }

}
package v04;

public class VisiCalc {

  private static final int FILAS = 30;
  private static final int COLUMNAS = 25;

  public static void main(String[] args) {

    HojaDeCalculo miHoja = new HojaDeCalculo(FILAS, COLUMNAS);
    VisiCalcUI ui = new VisiCalcUI(miHoja);
    ui.iniciar();
  }
}
package v04;

import java.util.Arrays;
import java.util.Scanner;
import librerias.Consola;

public class VisiCalcUI {
  private Viewport viewport;
  private Scanner scanner;

  public VisiCalcUI(HojaDeCalculo hoja) {
    this.viewport = new Viewport(hoja, 15, 10);
    this.scanner = new Scanner(System.in);
  }

  public void iniciar() {
    boolean estaOperativo = true;

    while (estaOperativo) {
      mostrarHoja();
      char comando = scanner.next().toUpperCase().charAt(0);
      estaOperativo = procesarComando(comando);
    }

    System.out.println("Saliendo del programa.");
    scanner.close();
  }

  private void mostrarHoja() {
    Consola.limpiarPantalla();
    mostrarOpciones();
    System.out.print("      ");
    for (int j = 0; j < viewport.getColumnasViewport(); j++) {
      char letraColumna = (char) ('A' + viewport.getColumnaInicio() + j);
      System.out.printf("%-8s", letraColumna);
    }
    System.out.println();

    for (int i = 0; i < viewport.getFilasViewport(); i++) {
      System.out.printf("%-5d|", viewport.getFilaInicio() + i + 1);

      for (int j = 0; j < viewport.getColumnasViewport(); j++) {
        String celda = viewport.getCelda(i, j).getContenido();
        celda = celda.length() > 5 ? celda.substring(0, 5) : String.format("%-5s", celda);

        if (i == viewport.getFilaCursorGlobal() - viewport.getFilaInicio()
            && j == viewport.getColumnaCursorGlobal() - viewport.getColumnaInicio()) {
          System.out.print("[" + celda + "]");
        } else {
          System.out.print(" " + celda + " ");
        }
        System.out.print("|");
      }
      System.out.println();
    }
    Consola.posicionarse(2, 10);
  }

  private void mostrarOpciones() {

    int filaActual = viewport.getFilaCursorGlobal();
    int columnaActual = viewport.getColumnaCursorGlobal();
    char letraColumna = (char) ('A' + columnaActual);

    System.out.print("[" + letraColumna + (filaActual + 1) + "] ");
    System.out.println("OPCIONES: desplazarse: wasd | editar: e | salir: q");
    System.out.println("COMANDO >");

  }

  private boolean procesarComando(char comando) {
    switch (comando) {
      case 'W':
        viewport.moverCursor(-1, 0);
        break;
      case 'A':
        viewport.moverCursor(0, -1);
        break;
      case 'S':
        viewport.moverCursor(1, 0);
        break;
      case 'D':
        viewport.moverCursor(0, 1);
        break;
      case 'E':
        editarCeldaActual();
        break;
      case 'O':
        bubbleSort();
        break;
      case 'Q':
        return false;
      default:
        System.out.println("Comando inválido. Intente nuevamente.");
    }
    return true;
  }

  private void editarCeldaActual() {
    Celda celdaActual = viewport.getCeldaCursor();
    Consola.posicionarse(2, 1);
    System.out.print("Ingrese el texto:");
    String texto = scanner.next();
    celdaActual.setContenido(texto);
  }

  public void bubbleSort() {
    System.out.print("Introduce la primera fila desde la que se quiere ordenar (indice basado en 1): ");
    int filaInicio = scanner.nextInt() - 1; // Convertir a índice basado en 0
    System.out.print("Introduce la ultima fila que se quiere ordenar (indice basado en 1): ");
    int filaFin = scanner.nextInt(); // Este es exclusivo

    int[] array = getIntArray(filaInicio, filaFin);
    int n = array.length;
    for (int i = 0; i < n - 1; i++) {
      for (int j = 0; j < n - 1 - i; j++) {
        if (array[j] > array[j + 1]) {
          int temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
        }
      }
    }
    insertarArray(array, filaInicio, filaFin);
  }

  public int[] getIntArray(int filaInicio, int filaFin) {
    int columna = viewport.getColumnaCursorGlobal();
    int[] array = new int[(filaFin - filaInicio)];
    int j = 0;
    for (int i = filaInicio; i < filaFin; i++) {
      array[j] = Integer.parseInt(viewport.getCelda(i, columna).getContenido());
      j++;
    }
    return array;
  }

  public void insertarArray(int[] array, int filaInicio, int filaFin) {
    int columna = viewport.getColumnaCursorGlobal();
    String[] stringArray = Arrays.stream(array).mapToObj(String::valueOf).toArray(String[]::new);
    int j = 0;
    for (int i = filaInicio; i < filaFin; i++) {
      viewport.getCelda(i, columna).setContenido(stringArray[j]);
      j++;
    }
  }

}
